{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","card","minWidth","margin","App","classes","till","Date","useState","seconds","setSeconds","minutes","setMinutes","hours","setHours","days","setDays","updateAll","next","now","time","Math","floor","getTime","calculateTill","useEffect","setInterval","Container","component","CssBaseline","Grid","container","direction","justify","alignItems","style","marginTop","item","Card","className","CardContent","Typography","variant","gutterBottom","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAIMA,EAAYC,aAAW,iBAAO,CAClCC,KAAM,CACJC,SAAU,IACVC,OAAQ,QAmHGC,MAvFf,WAEE,IAAMC,EAAUN,IAEVO,EAAO,IAAIC,KAAK,YAJT,EAMiBC,mBAAS,GAN1B,mBAMNC,EANM,KAMGC,EANH,OAOiBF,mBAAS,GAP1B,mBAONG,EAPM,KAOGC,EAPH,OAQaJ,mBAAS,GARtB,mBAQNK,EARM,KAQCC,EARD,OASWN,mBAAS,GATpB,mBASNO,EATM,KASAC,EATA,KAWPC,EAAY,WAEhB,IAAMC,EArCV,SAAuBZ,GAErB,IAAMa,EAAM,IAAIZ,KACZa,EAAOC,KAAKC,OAAOhB,EAAKiB,UAAYJ,EAAII,WAAa,KAazD,MAAO,CACLd,QAZcW,EAAO,GAarBT,SAZFS,EAAOC,KAAKC,MAAMF,EAAO,KAEF,GAWrBP,OAVFO,EAAOC,KAAKC,MAAMF,EAAO,KAEJ,GASnBL,KARFK,EAAOC,KAAKC,MAAMF,EAAO,KAyBVI,CAAclB,GAC3BI,EAAWQ,EAAKT,SAChBG,EAAWM,EAAKP,SAChBG,EAASI,EAAKL,OACdG,EAAQE,EAAKH,OAOf,OAJAU,oBAAUR,EAAW,IAErBS,YAAYT,EAAW,KAGrB,kBAACU,EAAA,EAAD,CAAWC,UAAU,QACnB,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,SACXC,MAAO,CAACC,UAAW,KAEnB,kBAACN,EAAA,EAAD,CAAMO,MAAI,GACR,kBAACC,EAAA,EAAD,CAAMC,UAAWlC,EAAQJ,MACvB,kBAACuC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,GAClC5B,GAEH,kBAAC0B,EAAA,EAAD,CAAYC,QAAQ,SAApB,WAMN,kBAACZ,EAAA,EAAD,CAAMO,MAAI,GACR,kBAACC,EAAA,EAAD,CAAMC,UAAWlC,EAAQJ,MACrB,kBAACuC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,GAClC9B,GAEH,kBAAC4B,EAAA,EAAD,CAAYC,QAAQ,SAApB,YAMR,kBAACZ,EAAA,EAAD,CAAMO,MAAI,GACR,kBAACC,EAAA,EAAD,CAAMC,UAAWlC,EAAQJ,MACrB,kBAACuC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,GAClChC,GAEH,kBAAC8B,EAAA,EAAD,CAAYC,QAAQ,SAApB,cAMR,kBAACZ,EAAA,EAAD,CAAMO,MAAI,GACR,kBAACC,EAAA,EAAD,CAAMC,UAAWlC,EAAQJ,MACrB,kBAACuC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,GAClClC,GAEH,kBAACgC,EAAA,EAAD,CAAYC,QAAQ,SAApB,iBCnGIE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.226754ac.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Grid, CssBaseline, Container, Card, CardContent, Typography } from '@material-ui/core';\nimport {makeStyles} from '@material-ui/styles';\n\nconst useStyles = makeStyles(() => ({\n  card: {\n    minWidth: 120,\n    margin: 24\n  }\n}))\n\nfunction calculateTill(till) {\n\n  const now = new Date();\n  let time = Math.floor((till.getTime() - now.getTime()) / 1000);\n\n  const seconds = time % 60;\n  time = Math.floor(time / 60);\n\n  const minutes = time % 60;\n  time = Math.floor(time / 60);\n\n  const hours = time % 24;\n  time = Math.floor(time / 24);\n\n  const days = time;\n\n  return {\n    seconds,\n    minutes,\n    hours,\n    days\n  }\n}\n\nfunction App() {\n\n  const classes = useStyles();\n\n  const till = new Date(1583870400000);\n\n  const [seconds, setSeconds] = useState(0);\n  const [minutes, setMinutes] = useState(0);\n  const [hours, setHours] = useState(0);\n  const [days, setDays] = useState(0);\n\n  const updateAll = () => {\n\n    const next = calculateTill(till);\n    setSeconds(next.seconds);\n    setMinutes(next.minutes);\n    setHours(next.hours);\n    setDays(next.days);\n  }\n\n  useEffect(updateAll, []);\n\n  setInterval(updateAll, 500);\n\n  return (\n    <Container component=\"main\">\n      <CssBaseline />\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n        style={{marginTop: 20}}\n      >\n        <Grid item>\n          <Card className={classes.card}>\n            <CardContent>\n              <Typography variant=\"h5\" gutterBottom>\n                {days}\n              </Typography>\n              <Typography variant=\"body2\">\n                Days\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item>\n          <Card className={classes.card}>\n              <CardContent>\n                <Typography variant=\"h5\" gutterBottom>\n                  {hours}\n                </Typography>\n                <Typography variant=\"body2\">\n                  Hours\n                </Typography>\n              </CardContent>\n            </Card>\n        </Grid>\n        <Grid item>\n          <Card className={classes.card}>\n              <CardContent>\n                <Typography variant=\"h5\" gutterBottom>\n                  {minutes}\n                </Typography>\n                <Typography variant=\"body2\">\n                  Minutes\n                </Typography>\n              </CardContent>\n            </Card>\n        </Grid>\n        <Grid item>\n          <Card className={classes.card}>\n              <CardContent>\n                <Typography variant=\"h5\" gutterBottom>\n                  {seconds}\n                </Typography>\n                <Typography variant=\"body2\">\n                  Seconds\n                </Typography>\n              </CardContent>\n            </Card>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}